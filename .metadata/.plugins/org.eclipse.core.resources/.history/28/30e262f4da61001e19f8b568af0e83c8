package mjsip_design.sipServerDesign.service.concretes;

 

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.repository.query.FluentQuery.FetchableFluentQuery;
import org.springframework.stereotype.Service;

import mjsip_design.sipServerDesign.core.utililities.results.DataResult;
import mjsip_design.sipServerDesign.core.utililities.results.SuccessDataResult;
import mjsip_design.sipServerDesign.entities.concretes.Call;
import mjsip_design.sipServerDesign.entities.concretes.Domain;
import mjsip_design.sipServerDesign.repository.abstracts.DomainRepository;
import mjsip_design.sipServerDesign.requests.DomainUpdateRequest;
import mjsip_design.sipServerDesign.service.abstracts.DomainService;


@Service
public class DomainManager implements DomainService {
	private DomainRepository domainRepository;

	@Autowired
	public DomainManager(DomainRepository domainRepositor) {
		this.domainRepository = domainRepository;
		
	}

	@Override
	public DataResult<List<Domain>> getAllDomains() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataResult<Domain> getByDomainId(int domainId) {
		// TODO Auto-generated method stub
		return new SuccessDataResult<Domain>(this.domainRepository.getByDomainId(domainId),"Call Data listelendi");
	}

	@Override
	public DataResult<Domain> getByDomainName(String domainName) {
		// TODO Auto-generated method stub
		return new SuccessDataResult<Domain>(this.domainRepository.getByDomainName(domainName),"Call Data listelendi");
	}



	
	
/*
	public List<Domain> getAllDomainsWithParam(Optional<Long> userId, Optional<Long> callId) {
		if(userId.isPresent() && callId.isPresent()) { 
			return domainRepository.findByUserIdAndCallId(userId.get(), callId.get());
		} else if(userId.isPresent()) {
			return domainRepository.findByUserId(userId.get());
			 
		} else if(callId.isPresent()) {
			return domainRepository.findByCallId(callId.get());
		}
		else 
			return domainRepository.findAll();
	
	}

	public Domain getOneDomainById(Long domainId) {
		return domainRepository.findById(domainId).orElse(null);
	}
	
	public Domain createOneDomain(DomainCreateRequest domainCreateRequest) { 
		User user = userService.getOneUserById(domainCreateRequest.getUserId());
		Call call = callService.getOneCallById(domainCreateRequest.getCallId());
		//User user = domainCreateRequest.getUser();
		//Call call = domainCreateRequest.getCall();
		
		if(user != null && call !=null) {
			Domain domainToSave = new Domain();
			domainToSave.setId(domainCreateRequest.getId());
			domainToSave.setCall(call);
			domainToSave.setUser(user);
			domainToSave.setDomainName(domainCreateRequest.getDomainName());
			
			return domainRepository.save(domainToSave);
			
		} else 
			return null;
		
	}

	public Domain updateOneDomainById(Long domainId, DomainUpdateRequest domainUpdateRequest) {
		Optional<Domain> domain = domainRepository.findById(domainId);
		if(domain.isPresent()) { 
			Domain domainUpdate = domain.get();
			domainUpdate.setDomainName(domainUpdateRequest.getDomainName());
			return domainRepository.save(domainUpdate); 
				
		} else
		return null;
	}

	public void deleteOneDomainById(Long domainId) {
		domainRepository.deleteById(domainId);
		
		
	}
	*/

} 
 
