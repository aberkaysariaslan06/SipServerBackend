package mjsip_design.sipServerDesign.api.controllers;
//
//import java.util.List;
//
//import org.apache.el.stream.Optional;
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.CrossOrigin;
////import org.springframework.security.access.prepost.PostAuthorize;
//import org.springframework.web.bind.annotation.DeleteMapping;
//import org.springframework.web.bind.annotation.GetMapping;
//import org.springframework.web.bind.annotation.PathVariable;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.PutMapping;
//import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.RestController;
//import lombok.Delegate;
//import lombok.Data;
/*

@RestController
@RequestMapping("/users")
@CrossOrigin
public class UserController {
	private UserService userService;
	
	
	public UserController(UserService userService) {
		this.userService = userService;
		
	}
	
	@GetMapping
		public List<User> getAllUsers(){
			return userService.getAllUsers();
	}
	@PostMapping
		public User createUser(@RequestBody User newUser) {
		 return userService.saveOneUser(newUser);		
	}
	@GetMapping("/{userId}")
		public User getOneUser(@PathVariable Long userId) {
			return userService.getOneUserById(userId);
	}
	/*
	@GetMapping("/by-username/{userName}")
		public ResponseEntity<List<User>> getByUserNameContains(@PathVariable String userName) {
			List<User> users = userService.getByUserNameContains(userName);
			 if (users.isEmpty()) {
			        // Kullanıcı bulunamadığında yapılacak işlem
			        // Örneğin: throw new EntityNotFoundException("Kullanıcı bulunamadı");
			    }

			    return users;
			}
			*/
	
	/*
	@PutMapping("/{userId}")
		public User updateOneUser(@PathVariable Long userId, @RequestBody User newUser) {
			return userService.updateOneUser(userId, newUser);
			
	}
	@DeleteMapping("/{userId}")
	public void deleteOneUser(@PathVariable Long userId) {
			 userService.deleteById(userId);

	}
	
	

}
*/
